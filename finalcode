#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <deque>

using namespace std;

struct Node {
  string name;
  string drink;
  Node* next;

  Node(string n, string d) : name(n), drink(d), next(nullptr) {}
};

class CoffeeQueue {
private:
  Node* front;
  Node* rear;

public:
  CoffeeQueue() : front(nullptr), rear(nullptr) {}

  void addQueue(string name, string drink) {
    Node* newNode = new Node(name, drink);
    if (rear == nullptr) {
      front = rear = newNode;
    } else {
      rear->next = newNode;
      rear = newNode;
    }
  }

  void removeQueue() {
    if (front == nullptr) {
      cout << "The queue is empty." << endl;
      return;
    }
    Node* temp = front;
    front = front->next;
    if (front == nullptr) {
      rear = nullptr;
    }
    cout << temp->name << " with a " << temp->drink << " is served and leaves queue." << endl;
    delete temp;
  }

  bool isEmpty() const {
    return front == nullptr;
  }

  void display() const {
    if (isEmpty()) {
      cout << "The queue is empty" << endl;
      return;
    }
    Node* current = front;
    cout << "Current queue:" << endl;
    while (current != nullptr) {
      cout << " " << current->name << " (" << current->drink << ")" << endl;
      current = current->next;
    }
  }
};

void generateCustomer(string& name, string& item, const string items[], int itemSize) {
  string names[] = {"Luigi", "Angelina", "Amari", "Maria", "Stewie", "Nani"};
  
  name = names[rand() % 6];
  item = items[rand() % itemSize];
}

int main() {
  srand(static_cast<unsigned>(time(0)));

  CoffeeQueue coffeeQueue;
  deque<pair<string, string>> muffinQueue;

  string name, coffeeDrink, muffinFlavor;
  string coffeeDrinks[] = {"Coffee", "Hot Chocolate", "Frappe", "Mocha", "Espresso", "Latte"};
  string muffinFlavors[] = {"Chocolate", "Blueberry", "Banana", "Confetti", "Cinnamon", "Cupcake"}; 
  
  for (int i = 0; i < 3; ++i) {
    generateCustomer(name, coffeeDrink, coffeeDrinks, 6);
    coffeeQueue.addQueue(name, coffeeDrink);

    generateCustomer(name, muffinFlavor, muffinFlavors, 6);
    muffinQueue.push_back({name, muffinFlavor});
  }

  for (int round = 1; round <= 10; ++round) {
    cout << endl;
    cout << "--- Round " << round << " ---" << endl;

    cout << "Coffee Booth:" << endl;
    coffeeQueue.removeQueue();

    if (rand() % 2 == 0) {
      generateCustomer(name, coffeeDrink, coffeeDrinks, 6);
      cout << name << " with a " << coffeeDrink << " joins the coffee queue." << endl;
      coffeeQueue.addQueue(name, coffeeDrink);
    }

    coffeeQueue.display();
  }

  return 0;
}
