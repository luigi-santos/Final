#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

struct Node {
  string name;
  string drink;
  Node* next;

  node(string n, string d) : name(n), drink(d), next(nullptr) {}
};

class CoffeeQueue {
private:
  Node* front;
  Node* rear;

public:
  CoffeeQueue() : front(nullptr), rear(nullptr) {}

  void addQueue(string name, string drink) {
    Node* newNode + new Node(name, drink);
    if (rear == nullptr) {
      front = rear = newNode;
    } else {
      rear->next = newNode;
      rear = newNode;
    }
  }

  void removeQueue() {
    if (front == nullptr) {
      cout << "The queue is empty." << empty;
      return;
    }
    Node* temp = front;
    front = front->next;
    if (front == nullptr) {
      rear = nullptr;
    }
    cout << tem->name<< " with a " << temp->drink << " is served and leaves queue." << endl;
    delete temp;
  }

  bool isEmpty() const {
    return front == nullptr;
  }

  void display() const {
    if (isEmpty()) {
      cout << "The queue is empty" << endl;
      return;
    }
    Node* current = front;
    cout << "Current queue:" << endl;
    while (current != nullptr) {
      cout << " " << current->name << " (" << current->drink << ")" << endl;
      current = current->next;
    }
  }
};

void generateCustomer(string& name, string& drink) {
  string names[] = ("Luigi", "Angelina", "Amari", "Maria", "Stewie", "Nani"};
  string drink[] = {"Coffee", "Hot Chocolate", "Frappe", "Mocha", "Espresso", "Latte"}
  name = names[rand() % 6];
  drink = drinks[rand() % 6];
}

int main() {
  srand(static_cast<unsigned>(time(0)));

  CoffeeQueue queue;
  string name, drink;

  for (int i = 0; i < 3; ++i) {
    generateCustomer(name, drink);
    queue.addQueue(name, drink);
  }

  for (int round = 1; round <= 10; ++round) {
    cout << endl;
    cout << "--- Round " << round << " ---" << endl;
    queue.RemoveQueue();

    if (rand() % 2 == 0) {
      generateCustomer(name, drink);
      cout << name << " with a " << drink << " joins the queue." << endl;
      queue.addQueue(name, drink);
    }

    queue.display();
  }

  return 0;
}
